!CHAPTER The Users App

The users app provides an username-based user storage JavaScript API that can be used in other Foxx apps.

!SECTION JavaScript API: **userStorage**

This app exposes an user storage via a JavaScript API named **userStorage**.

@EXAMPLES

```js
var userStorage = Foxx.requireApp('/_system/users').userStorage;
```

!SUBSECTION Exceptions

!SUBSUBSECTION User Not Found

Indicates an user could not be found in the database.

`new userStorage.errors.UserNotFound(userId)`

Thrown by the user storages **delete** and **get** methods if passed an user ID that does not exist in the database.

@EXAMPLES

```js
try {
    userStorage.get(invalidUserId);
} catch(err) {
    assertTrue(err instanceof userStorage.errors.UserNotFound);
}
```

!SUBSUBSECTION Username Not Available

Indicates an username is already in use.

`new userStorage.errors.UsernameNotAvailable(username)`

Thrown by the user storages **create** method if passed a **userData** object with a **username** that is already in use.

@EXAMPLES

```js
try {
    userStorage.create('alreadyTaken', {some: 'data'});
} catch(err) {
    assertTrue(err instanceof userStorage.errors.UsernameNotAvailable);
}
```

!SUBSECTION The user object

User objects are instances of a Foxx model with the following attributes:

* **user**: the user's unique **username**
* **userData**: application-specific user data
* **authData**: an arbitrary object used by authentication apps to store sensitive data. For password authentication this could be a hash, for third-party authentication services this could be information about the user's identity. This attribute should never be exposed to the user directly

!SUBSECTION Create an user

Creates and saves a new instance of the user model.

`userStorage.create(username, [userData,] [authData])`

Throws **UsernameNotAvailable** if an user with the given username already exists.

**Note:** When using the system users app (mounted at **/\_system/users**), new users will automatically have their **active** flag set to **true** if no value is provided in the **authData** (or if **authData** is omitted entirely).

**Parameter**

* **username**: an arbitrary string that will be used as the user's username
* **userData** (optional): an arbitrary object that will be stored as the user's **userData** attribute when the model is saved to the database
* **authData** (optional): an arbitrary object that will be stored as the user's **authData** attribute when the model is saved to the database

@EXAMPLES

```js
var user = userStorage.create('malaclypse', {hair: 'fuzzy'});
assertEqual(user.get('userData').hair, 'fuzzy');
```

!SUBSECTION Fetch an existing user

There are two ways to fetch an user via the user storage API:

* resolving a **username** with the user storages **resolve** method
* calling the user storages **get** method with an user ID directly

!SUBSUBSECTION Resolve a **username**

Fetches an user with a given **username**.

`userStorage.resolve(username)`

If the username can not be resolved, a **UserNotFound** exception will be thrown instead.

**Parameter**

* **username**: an arbitrary string matching the username of the user you are trying to fetch.

@EXAMPLES

```js
var user = userStorage.resolve('malaclypse');
assertEqual(user.user, 'malaclypse');
```

!SUBSUBSECTION Resolve an user ID directly

Fetches an user with a given ID.

`userStorage.get(userId)`

Attempts to fetch the user with the given ID from the database. If the user does not exist, an **UserNotFound** exception will be thrown instead.

**Parameter**

* **userId**: an user **_key**.

@EXAMPLES

```js
var user = userStorage.get(userId);
assertEqual(user.get('_key'), userId);
```

!SUBSECTION Delete an user

There are two ways to delete an user from the database:

* calling the user storages **delete** method with an user ID directly
* telling an user to delete itself

!SUBSUBSECTION Delete an user by its ID

Delete an user with a given ID.

`userStorage.delete(userId)`

Attempts to delete the user with the given user ID from the database. If the user does not exist, a **UserNotFound** exception will be thrown. The method always returns **null**.

**Parameter**

* **userId**: an user **_key**.

@EXAMPLES

```js
userStorage.delete(userId);
```

!SUBSUBSECTION Tell an user to delete itself

Delete an user from the database.

`user.delete()`

Attempts to delete the user from the database.

Returns **true** if the user was deleted successfully.

Returns **false** if the user already didn't exist.

@EXAMPLES

```js
var user = userStorage.get(userId);
user.delete();
```

!SUBSECTION Save an user

Save an user to the database.

`user.save()`

In order to commit changes made to the user in your code you need to call this method.

@EXAMPLES

```js
var userData = user.get('userData');
userData.counter++;
user.save();
```
