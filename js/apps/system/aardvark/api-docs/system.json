{
    "basePath": "/",
    "swaggerVersion": "1.1",
    "apiVersion": "0.1",
    "apis": [
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Is returned in all cases. <br><br>",
                            "code": "200"
                        }
                    ],
                    "parameters": [],
                    "notes": "<br><br> Returns the database-version that this server requires. The version is returned in the <em>version</em> attribute of the result. <br><br>",
                    "summary": " Return the required version of the database",
                    "httpMethod": "GET",
                    "examples": "",
                    "nickname": "ReturnTheRequiredVersionOfTheDatabase"
                }
            ],
            "path": "/_admin/database/target-version"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Is returned in all cases. <br><br>",
                            "code": "200"
                        }
                    ],
                    "parameters": [],
                    "notes": "<br><br> Returns the role of a server in a cluster. The role is returned in the <em>role</em> attribute of the result. Possible return values for <em>role</em> are:  <ul class=\"swagger-list\"><li><em>COORDINATOR</em>: the server is a coordinator in a cluster <li><em>PRIMARY</em>: the server is a primary database server in a cluster <li><em>SECONDARY</em>: the server is a secondary database server in a cluster <li><em>UNDEFINED</em>: in a cluster, <em>UNDEFINED</em> is returned if the server role cannot be  determined. On a single server, <em>UNDEFINED</em> is the only possible return  value.",
                    "summary": " Return role of a server in a cluster",
                    "httpMethod": "GET",
                    "examples": "",
                    "nickname": "ReturnRoleOfAServerInACluster"
                }
            ],
            "path": "/_admin/server/role"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Is returned if the operation succeeds. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used. <br><br>",
                            "code": "405"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Boolean",
                            "paramType": "path",
                            "required": "false",
                            "name": "waitForSync",
                            "description": "Whether or not the operation should block until the not-yet synchronized data in the write-ahead log was synchronized to disk. <br><br>"
                        },
                        {
                            "dataType": "Boolean",
                            "paramType": "path",
                            "required": "false",
                            "name": "waitForCollector",
                            "description": "Whether or not the operation should block until the data in the flushed log has been collected by the write-ahead log garbage collector. Note that setting this option to <em>true</em> might block for a long time if there are long-running transactions and the write-ahead log garbage collector cannot finish garbage collection. <br><br>"
                        }
                    ],
                    "notes": "<br><br> Flushes the write-ahead log. By flushing the currently active write-ahead logfile, the data in it can be transferred to collection journals and datafiles. This is useful to ensure that all data for a collection is present in the collection journals and datafiles, for example, when dumping the data of a collection. <br><br>",
                    "summary": " Flushes the write-ahead log",
                    "httpMethod": "PUT",
                    "examples": "",
                    "nickname": "FlushesTheWrite-aheadLog"
                }
            ],
            "path": "/_admin/wal/flush"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Is returned if the operation succeeds. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used. <br><br> <br><br>",
                            "code": "405"
                        }
                    ],
                    "parameters": [],
                    "notes": "<br><br> Configures the behavior of the write-ahead log. The body of the request must be a JSON object with the following attributes:  <ul class=\"swagger-list\"><li><em>allowOversizeEntries</em>: whether or not operations that are bigger than a single logfile can be executed and stored <li><em>logfileSize</em>: the size of each write-ahead logfile <li><em>historicLogfiles</em>: the maximum number of historic logfiles to keep <li><em>reserveLogfiles</em>: the maximum number of reserve logfiles that ArangoDB allocates in the background <li><em>throttleWait</em>: the maximum wait time that operations will wait before they get aborted if case of write-throttling (in milliseconds) <li><em>throttleWhenPending</em>: the number of unprocessed garbage-collection operations that, when reached, will activate write-throttling. A value of <em>0</em> means that write-throttling will not be triggered.  </ul> Specifying any of the above attributes is optional. Not specified attributes will be ignored and the configuration for them will not be modified. <br><br>",
                    "summary": " Configures the write-ahead log",
                    "httpMethod": "PUT",
                    "examples": "<br><br><br><br><pre><code class=\"json\">shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_admin/wal/properties\n{\"logfileSize\":33554432,\"allowOversizeEntries\":true}\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"allowOversizeEntries\" : true, \n  \"logfileSize\" : 33554432, \n  \"historicLogfiles\" : 10, \n  \"reserveLogfiles\" : 1, \n  \"syncInterval\" : 100, \n  \"throttleWait\" : 15000, \n  \"throttleWhenPending\" : 0, \n  \"error\" : false, \n  \"code\" : 200 \n}\n</code></pre><br><br><br>",
                    "nickname": "ConfiguresTheWrite-aheadLog"
                }
            ],
            "path": "/_admin/wal/properties"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Is returned if the operation succeeds. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used. <br><br> <br><br>",
                            "code": "405"
                        }
                    ],
                    "parameters": [],
                    "notes": "<br><br> Retrieves the configuration of the write-ahead log. The result is a JSON array with the following attributes:  <ul class=\"swagger-list\"><li><em>allowOversizeEntries</em>: whether or not operations that are bigger than a single logfile can be executed and stored <li><em>logfileSize</em>: the size of each write-ahead logfile <li><em>historicLogfiles</em>: the maximum number of historic logfiles to keep <li><em>reserveLogfiles</em>: the maximum number of reserve logfiles that ArangoDB allocates in the background <li><em>syncInterval</em>: the interval for automatic synchronization of not-yet synchronized write-ahead log data (in milliseconds) <li><em>throttleWait</em>: the maximum wait time that operations will wait before they get aborted if case of write-throttling (in milliseconds) <li><em>throttleWhenPending</em>: the number of unprocessed garbage-collection operations that, when reached, will activate write-throttling. A value of <em>0</em> means that write-throttling will not be triggered.",
                    "summary": " Retrieves the configuration of the write-ahead log",
                    "httpMethod": "GET",
                    "examples": "<br><br><br><br><pre><code class=\"json\">shell> curl --data-binary @- --dump - http://localhost:8529/_admin/wal/properties\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"allowOversizeEntries\" : true, \n  \"logfileSize\" : 33554432, \n  \"historicLogfiles\" : 10, \n  \"reserveLogfiles\" : 1, \n  \"syncInterval\" : 100, \n  \"throttleWait\" : 15000, \n  \"throttleWhenPending\" : 0, \n  \"error\" : false, \n  \"code\" : 200 \n}\n</code></pre><br><br><br>",
                    "nickname": "RetrievesTheConfigurationOfTheWrite-aheadLog"
                }
            ],
            "path": "/_admin/wal/properties"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Routing information was reloaded successfully. <br><br>",
                            "code": "200"
                        }
                    ],
                    "parameters": [],
                    "notes": "<br><br> Reloads the routing information from the collection <em>routing</em>. <br><br>",
                    "summary": " Reloads the routing information",
                    "httpMethod": "POST",
                    "examples": "",
                    "nickname": "ReloadsTheRoutingInformation"
                }
            ],
            "path": "/_admin/routing/reload"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Time was returned successfully. <br><br>",
                            "code": "200"
                        }
                    ],
                    "parameters": [],
                    "notes": "<br><br> The call returns an object with the attribute <em>time</em>. This contains the current system time as a Unix timestamp with microsecond precision. <br><br>",
                    "summary": " Return system time",
                    "httpMethod": "GET",
                    "examples": "",
                    "nickname": "ReturnSystemTime"
                }
            ],
            "path": "/_admin/time"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Sleep was conducted successfully. @DendocuBlock",
                            "code": "200"
                        }
                    ],
                    "parameters": [],
                    "notes": "<br><br> The call returns an object with the attribute <em>duration</em>. This takes as many seconds as the duration argument says. <br><br>",
                    "summary": " Sleep for 5 seconds",
                    "httpMethod": "GET",
                    "examples": "",
                    "nickname": "SleepFor5Seconds"
                }
            ],
            "path": "/_admin/sleep?duration=5"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Echo was returned successfully. <br><br>",
                            "code": "200"
                        }
                    ],
                    "parameters": [],
                    "notes": "<br><br> The call returns an object with the following attributes: <br><br>  <ul class=\"swagger-list\"><li><em>headers</em>: a list of HTTP headers received  <li><em>requestType</em>: the HTTP request method (e.g. GET)  <li><em>parameters</em>: list of URL parameters received",
                    "summary": " Return current request",
                    "httpMethod": "GET",
                    "examples": "",
                    "nickname": "ReturnCurrentRequest"
                }
            ],
            "path": "/_admin/echo"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Statistics were returned successfully. <br><br>",
                            "code": "200"
                        }
                    ],
                    "parameters": [],
                    "notes": "<br><br> Returns the statistics information. The returned object contains the statistics figures grouped together according to the description returned by <em>_admin/statistics-description</em>. For instance, to access a figure <em>userTime</em> from the group <em>system</em>, you first select the sub-object describing the group stored in <em>system</em> and in that sub-object the value for <em>userTime</em> is stored in the attribute of the same name. <br><br> In case of a distribution, the returned object contains the total count in <em>count</em> and the distribution list in <em>counts</em>. The sum (or total) of the individual values is returned in <em>sum</em>. <br><br>",
                    "summary": " Read the statistics",
                    "httpMethod": "GET",
                    "examples": "<br><br><br><br><pre><code class=\"json\">shell> curl --data-binary @- --dump - http://localhost:8529/_admin/statistics\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"time\" : 1418820924.988567, \n  \"system\" : { \n    \"minorPageFaults\" : 223711, \n    \"majorPageFaults\" : 2376, \n    \"userTime\" : 23.33804, \n    \"systemTime\" : 10.243727, \n    \"numberOfThreads\" : 19, \n    \"residentSize\" : 77553664, \n    \"residentSizePercent\" : 0.018056869506835938, \n    \"virtualSize\" : 5242343424 \n  }, \n  \"client\" : { \n    \"httpConnections\" : 1, \n    \"connectionTime\" : { \n      \"sum\" : 0.005606889724731445, \n      \"count\" : 1, \n      \"counts\" : [ \n        1, \n        0, \n        0, \n        0 \n      ] \n    }, \n    \"totalTime\" : { \n      \"sum\" : 50.145912885665894, \n      \"count\" : 10277, \n      \"counts\" : [ \n        9516, \n        597, \n        91, \n        57, \n        8, \n        4, \n        4 \n      ] \n    }, \n    \"requestTime\" : { \n      \"sum\" : 46.504558086395264, \n      \"count\" : 10277, \n      \"counts\" : [ \n        9544, \n        572, \n        89, \n        57, \n        7, \n        4, \n        4 \n      ] \n    }, \n    \"queueTime\" : { \n      \"sum\" : 0.4936790466308594, \n      \"count\" : 10277, \n      \"counts\" : [ \n        10277, \n        0, \n        0, \n        0, \n        0, \n        0, \n        0 \n      ] \n    }, \n    \"ioTime\" : { \n      \"sum\" : 3.1476757526397705, \n      \"count\" : 10277, \n      \"counts\" : [ \n        10272, \n        4, \n        0, \n        0, \n        1, \n        0, \n        0 \n      ] \n    }, \n    \"bytesSent\" : { \n      \"sum\" : 3762817, \n      \"count\" : 10277, \n      \"counts\" : [ \n        2656, \n        7469, \n        14, \n        10, \n        128, \n        0 \n      ] \n    }, \n    \"bytesReceived\" : { \n      \"sum\" : 2228828, \n      \"count\" : 10277, \n      \"counts\" : [ \n        8490, \n        1787, \n        0, \n        0, \n        0, \n        0 \n      ] \n    } \n  }, \n  \"http\" : { \n    \"requestsTotal\" : 10278, \n    \"requestsAsync\" : 0, \n    \"requestsGet\" : 3663, \n    \"requestsHead\" : 295, \n    \"requestsPost\" : 4634, \n    \"requestsPut\" : 690, \n    \"requestsPatch\" : 31, \n    \"requestsDelete\" : 965, \n    \"requestsOptions\" : 0, \n    \"requestsOther\" : 0 \n  }, \n  \"server\" : { \n    \"uptime\" : 71.3914840221405, \n    \"physicalMemory\" : 4294967296 \n  }, \n  \"error\" : false, \n  \"code\" : 200 \n}\n</code></pre><br><br><br>",
                    "nickname": "ReadTheStatistics"
                }
            ],
            "path": "/_admin/statistics"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Description was returned successfully. <br><br>",
                            "code": "200"
                        }
                    ],
                    "parameters": [],
                    "notes": "<br><br> Returns a description of the statistics returned by <em>/_admin/statistics</em>. The returned objects contains a list of statistics groups in the attribute <em>groups</em> and a list of statistics figures in the attribute <em>figures</em>. <br><br> A statistics group is described by <br><br>  <ul class=\"swagger-list\"><li><em>group</em>: The identifier of the group. <li><em>name</em>: The name of the group. <li><em>description</em>: A description of the group.  </ul> A statistics figure is described by <br><br>  <ul class=\"swagger-list\"><li><em>group</em>: The identifier of the group to which this figure belongs. <li><em>identifier</em>: The identifier of the figure. It is unique within the group. <li><em>name</em>: The name of the figure. <li><em>description</em>: A description of the figure. <li><em>type</em>: Either <em>current</em>, <em>accumulated</em>, or <em>distribution</em>. <li><em>cuts</em>: The distribution vector. <li><em>units</em>: Units in which the figure is measured.",
                    "summary": " Statistics description",
                    "httpMethod": "GET",
                    "examples": "<br><br><br><br><pre><code class=\"json\">shell> curl --data-binary @- --dump - http://localhost:8529/_admin/statistics-description\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"groups\" : [ \n    { \n      \"group\" : \"system\", \n      \"name\" : \"Process Statistics\", \n      \"description\" : \"Statistics about the ArangoDB process\" \n    }, \n    { \n      \"group\" : \"client\", \n      \"name\" : \"Client Connection Statistics\", \n      \"description\" : \"Statistics about the connections.\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"name\" : \"HTTP Request Statistics\", \n      \"description\" : \"Statistics about the HTTP requests.\" \n    }, \n    { \n      \"group\" : \"server\", \n      \"name\" : \"Server Statistics\", \n      \"description\" : \"Statistics about the ArangoDB server\" \n    } \n  ], \n  \"figures\" : [ \n    { \n      \"group\" : \"system\", \n      \"identifier\" : \"userTime\", \n      \"name\" : \"User Time\", \n      \"description\" : \"Amount of time that this process has been scheduled in user mode, measured in seconds.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"seconds\" \n    }, \n    { \n      \"group\" : \"system\", \n      \"identifier\" : \"systemTime\", \n      \"name\" : \"System Time\", \n      \"description\" : \"Amount of time that this process has been scheduled in kernel mode, measured in seconds.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"seconds\" \n    }, \n    { \n      \"group\" : \"system\", \n      \"identifier\" : \"numberOfThreads\", \n      \"name\" : \"Number of Threads\", \n      \"description\" : \"Number of threads in the arangod process.\", \n      \"type\" : \"current\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"system\", \n      \"identifier\" : \"residentSize\", \n      \"name\" : \"Resident Set Size\", \n      \"description\" : \"The total size of the number of pages the process has in real memory. This is just the pages which count toward text, data, or stack space. This does not include pages which have not been demand-loaded in, or which are swapped out. The resident set size is reported in bytes.\", \n      \"type\" : \"current\", \n      \"units\" : \"bytes\" \n    }, \n    { \n      \"group\" : \"system\", \n      \"identifier\" : \"residentSizePercent\", \n      \"name\" : \"Resident Set Size\", \n      \"description\" : \"The percentage of physical memory used by the process as resident set size.\", \n      \"type\" : \"current\", \n      \"units\" : \"percent\" \n    }, \n    { \n      \"group\" : \"system\", \n      \"identifier\" : \"virtualSize\", \n      \"name\" : \"Virtual Memory Size\", \n      \"description\" : \"On Windows, this figure contains the total amount of memory that the memory manager has committed for the arangod process. On other systems, this figure contains The size of the virtual memory the process is using.\", \n      \"type\" : \"current\", \n      \"units\" : \"bytes\" \n    }, \n    { \n      \"group\" : \"system\", \n      \"identifier\" : \"minorPageFaults\", \n      \"name\" : \"Minor Page Faults\", \n      \"description\" : \"The number of minor faults the process has made which have not required loading a memory page from disk. This figure is not reported on Windows.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"system\", \n      \"identifier\" : \"majorPageFaults\", \n      \"name\" : \"Major Page Faults\", \n      \"description\" : \"On Windows, this figure contains the total number of page faults. On other system, this figure contains the number of major faults the process has made which have required loading a memory page from disk.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"client\", \n      \"identifier\" : \"httpConnections\", \n      \"name\" : \"Client Connections\", \n      \"description\" : \"The number of connections that are currently open.\", \n      \"type\" : \"current\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"client\", \n      \"identifier\" : \"totalTime\", \n      \"name\" : \"Total Time\", \n      \"description\" : \"Total time needed to answer a request.\", \n      \"type\" : \"distribution\", \n      \"cuts\" : [ \n        0.01, \n        0.05, \n        0.1, \n        0.2, \n        0.5, \n        1 \n      ], \n      \"units\" : \"seconds\" \n    }, \n    { \n      \"group\" : \"client\", \n      \"identifier\" : \"requestTime\", \n      \"name\" : \"Request Time\", \n      \"description\" : \"Request time needed to answer a request.\", \n      \"type\" : \"distribution\", \n      \"cuts\" : [ \n        0.01, \n        0.05, \n        0.1, \n        0.2, \n        0.5, \n        1 \n      ], \n      \"units\" : \"seconds\" \n    }, \n    { \n      \"group\" : \"client\", \n      \"identifier\" : \"queueTime\", \n      \"name\" : \"Queue Time\", \n      \"description\" : \"Queue time needed to answer a request.\", \n      \"type\" : \"distribution\", \n      \"cuts\" : [ \n        0.01, \n        0.05, \n        0.1, \n        0.2, \n        0.5, \n        1 \n      ], \n      \"units\" : \"seconds\" \n    }, \n    { \n      \"group\" : \"client\", \n      \"identifier\" : \"bytesSent\", \n      \"name\" : \"Bytes Sent\", \n      \"description\" : \"Bytes sents for a request.\", \n      \"type\" : \"distribution\", \n      \"cuts\" : [ \n        250, \n        1000, \n        2000, \n        5000, \n        10000 \n      ], \n      \"units\" : \"bytes\" \n    }, \n    { \n      \"group\" : \"client\", \n      \"identifier\" : \"bytesReceived\", \n      \"name\" : \"Bytes Received\", \n      \"description\" : \"Bytes receiveds for a request.\", \n      \"type\" : \"distribution\", \n      \"cuts\" : [ \n        250, \n        1000, \n        2000, \n        5000, \n        10000 \n      ], \n      \"units\" : \"bytes\" \n    }, \n    { \n      \"group\" : \"client\", \n      \"identifier\" : \"connectionTime\", \n      \"name\" : \"Connection Time\", \n      \"description\" : \"Total connection time of a client.\", \n      \"type\" : \"distribution\", \n      \"cuts\" : [ \n        0.1, \n        1, \n        60 \n      ], \n      \"units\" : \"seconds\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"identifier\" : \"requestsTotal\", \n      \"name\" : \"Total requests\", \n      \"description\" : \"Total number of HTTP requests.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"identifier\" : \"requestsAsync\", \n      \"name\" : \"Async requests\", \n      \"description\" : \"Number of asynchronously executed HTTP requests.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"identifier\" : \"requestsGet\", \n      \"name\" : \"HTTP GET requests\", \n      \"description\" : \"Number of HTTP GET requests.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"identifier\" : \"requestsHead\", \n      \"name\" : \"HTTP HEAD requests\", \n      \"description\" : \"Number of HTTP HEAD requests.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"identifier\" : \"requestsPost\", \n      \"name\" : \"HTTP POST requests\", \n      \"description\" : \"Number of HTTP POST requests.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"identifier\" : \"requestsPut\", \n      \"name\" : \"HTTP PUT requests\", \n      \"description\" : \"Number of HTTP PUT requests.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"identifier\" : \"requestsPatch\", \n      \"name\" : \"HTTP PATCH requests\", \n      \"description\" : \"Number of HTTP PATCH requests.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"identifier\" : \"requestsDelete\", \n      \"name\" : \"HTTP DELETE requests\", \n      \"description\" : \"Number of HTTP DELETE requests.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"identifier\" : \"requestsOptions\", \n      \"name\" : \"HTTP OPTIONS requests\", \n      \"description\" : \"Number of HTTP OPTIONS requests.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"identifier\" : \"requestsOther\", \n      \"name\" : \"other HTTP requests\", \n      \"description\" : \"Number of other HTTP requests.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"server\", \n      \"identifier\" : \"uptime\", \n      \"name\" : \"Server Uptime\", \n      \"description\" : \"Number of seconds elapsed since server start.\", \n      \"type\" : \"current\", \n      \"units\" : \"seconds\" \n    }, \n    { \n      \"group\" : \"server\", \n      \"identifier\" : \"physicalMemory\", \n      \"name\" : \"Physical Memory\", \n      \"description\" : \"Physical memory in bytes.\", \n      \"type\" : \"current\", \n      \"units\" : \"bytes\" \n    } \n  ], \n  \"error\" : false, \n  \"code\" : 200 \n}\n</code></pre><br><br><br>",
                    "nickname": "StatisticsDescription"
                }
            ],
            "path": "/_admin/statistics-description"
        },
        {
            "operations": [
                {
                    "errorResponses": [],
                    "parameters": [
                        {
                            "dataType": "Javascript",
                            "paramType": "body",
                            "required": "true",
                            "name": "body",
                            "description": "A JSON body containing an attribute \"tests\" which lists the files containing the test suites. <br><br>"
                        }
                    ],
                    "notes": "<br><br> Executes the specified tests on the server and returns an object with the test results. The object has an attribute \"error\" which states whether any error occurred. The object also has an attribute \"passed\" which indicates which tests passed and which did not. <br><br>",
                    "summary": " Runs tests on server",
                    "httpMethod": "POST",
                    "examples": "",
                    "nickname": "RunsTestsOnServer"
                }
            ],
            "path": "/_admin/test"
        },
        {
            "operations": [
                {
                    "errorResponses": [],
                    "parameters": [
                        {
                            "dataType": "Javascript",
                            "paramType": "body",
                            "required": "true",
                            "name": "body",
                            "description": "The body to be executed. <br><br>"
                        }
                    ],
                    "notes": "<br><br> Executes the javascript code in the body on the server as the body of a function with no arguments. If you have a <em>return</em> statement then the return value you produce will be returned as content type <em>application/json</em>. If the parameter <em>returnAsJSON</em> is set to <em>true</em>, the result will be a JSON object describing the return value directly, otherwise a string produced by JSON.stringify will be returned. <br><br>",
                    "summary": " Execute program",
                    "httpMethod": "POST",
                    "examples": "",
                    "nickname": "ExecuteProgram"
                }
            ],
            "path": "/_admin/execute"
        }
    ]
}
